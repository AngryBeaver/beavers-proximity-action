export declare namespace bp {
    type TestType = "skill" | "ability" | "hit" | "choices" | "input" | "prompt";

    interface Test {
        type: TestType
        name: string
        inputField: InputField
    }

    //each Action has one ActionSetting
    //Actions with fallback are automatically enabled.
    interface ActionSetting {
        enabled: {attribute: string, value: any}[],
        test: Test
    }


    interface ActionData {
        id: string,
        name: string,
        configurationDefinition: ConfigurationDefinition,
        allowSubOptions?: boolean,
        fallback?: ()=>void,//fallback when no tile is successfull.
        defaultTest: Test
    }

    interface ConfigurationDefinition {
        [configId: string]: InputField,
    }


    interface Action<E> {
        new(entity: E, config:any): EntityAction<E>
        data: ActionData,
        id: string,
    }

    // can be generated by EntityActionConfig
    // config + Action methods
    interface EntityAction<E> {
        entity: E,
        config: any,
        success: ()=>void,
        fail: ()=>void,
    }

    interface EntityActionConfig {      //this is stored in entity.flags.
        [actionId: string]: {
            subCheck?: string               //allow for additional user choice "search Table, investigate footprint"
            config: any,
        }
    }

    export class ActionEntity {
    }

    interface UserOutput {
        msg:(msg:string,type:"info | warn | error")=>Promise<void>
        prompt:({inputField:InputField })=>Promise<any>
    }
}